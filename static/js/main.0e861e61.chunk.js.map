{"version":3,"sources":["logo.svg","components/FetchData.js","components/ReturnGifs.js","App.js","reportWebVitals.js","index.js"],"names":["query","numOfImages","a","url","fetch","response","json","jsonData","console","log","FetchData","ReturnGifs","results","width","height","undefined","data","map","item","autoPlay","loop","src","images","preview","mp4","App","useState","search","Setsearch","Setquery","Setresults","setnumOfImages","Setindex","advanced","setAdvanced","Setwidth","Setheight","useEffect","prevIndex","getData","type","onChange","e","target","value","prevAdvanced","default","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAAe,I,0DCEf,WAAyBA,EAAMC,GAA/B,mBAAAC,EAAA,sEAEqBF,EACXG,EAAM,mFAAmFH,EAAM,UAAUC,EAAY,6BAH/H,SAI6BG,MAAMD,GAJnC,cAIYE,EAJZ,gBAK6BA,EAASC,OALtC,cAKYC,EALZ,yBAOaA,GAPb,kCAUMC,QAAQC,IAAR,MAVN,2D,sBAceC,M,8CCCAC,MAff,SAAoBC,EAAQC,EAAMC,GAI9B,OAHAN,QAAQC,IAAIG,QAGgBG,IAAzBH,EAAQA,QAAQI,KAEjBJ,EAAQA,QAAQI,KAAKC,KAAI,SAAAC,GAAI,OAAI,uBAAOC,UAAQ,EAACC,MAAI,EAACP,MAAOD,EAAQC,MAAOC,OAAQF,EAAQE,OAAQO,IAAKH,EAAKI,OAAOC,QAAQC,KAAUN,MAGrI,2DC8COO,MAjDf,WAAgB,IAAD,EAEcC,mBAAS,IAFvB,mBAENC,EAFM,KAECC,EAFD,OAGYF,mBAAS,IAHrB,mBAGN1B,EAHM,KAGA6B,EAHA,OAIgBH,mBAAS,IAJzB,mBAINd,EAJM,KAIEkB,EAJF,OAKwBJ,mBAAS,IALjC,mBAKNzB,EALM,KAKM8B,EALN,OAMYL,mBAAS,GANrB,mBAMAM,GANA,aAOkBN,oBAAS,GAP3B,mBAONO,EAPM,KAOGC,EAPH,OAQYR,mBAAU,KARtB,mBAQNb,EARM,KAQAsB,EARA,OAScT,mBAAU,KATxB,mBASNZ,EATM,KASCsB,EATD,KAqBb,OAVAC,qBAAU,WAAK,4CACb,4BAAAnC,EAAA,yDACe,KAAVF,EADL,gCAEuBU,EAAUV,EAAMC,GAFvC,OAEUe,EAFV,OAGIc,GAAW,kBAAMd,KACjBgB,GAAS,SAACM,GAAD,OAAeA,EAAY,KAJxC,4CADa,uBAAC,WAAD,wBAQbC,KACA,CAACvC,EAAOC,IAER,gCACE,iCACE,qDAEA,uBACA,iCACE,4DACA,uBAAOuC,KAAK,OAAMC,SAAW,SAACC,GAAD,OAAOd,EAAUc,EAAEC,OAAOC,UACvD,uBACA,gEACA,uBAAOJ,KAAK,SAAUC,SAAW,SAACC,GAAD,OAAOX,EAAeW,EAAEC,OAAOC,UAChE,uBACA,uBAAOJ,KAAK,WAAWC,SAAU,kBAAMP,GAAY,SAACW,GAAD,OAAmBA,QACtE,yDACA,wBACc,IAAbZ,EAAmB,gCAAK,qEAA+C,uBAAOO,KAAK,SAAUC,SAAW,SAACC,GAAD,OAAOP,EAASO,EAAEC,OAAOC,UAAiB,uBAAM,sEAAgD,uBAAOJ,KAAK,SAASM,QAAShC,EAAQ2B,SAAW,SAACC,GAAD,OAAON,EAAUM,EAAEC,OAAOC,aAA0B,KAC9S,uBACA,uBAAOJ,KAAK,SAASI,MAAM,WAAWG,QAAS,kBAAMlB,EAASF,SAElE,uBACA,iCACA,cAAC,EAAD,CAAYf,QAASA,EAASC,MAAOA,EAAOC,OAAQA,UCvC3CkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.0e861e61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import react from 'react'\n\nasync function FetchData(query,numOfImages){\n    try{\n      const search = query\n      let url = 'https://api.giphy.com/v1/gifs/search?api_key=61y6QTjRYFfZEvtKWd4qfL0gn6ymbSzv&q='+query+'&limit='+numOfImages+'&offset=0&rating=g&lang=en'\n      const response = await fetch(url)\n      const jsonData = await response.json();\n    //  console.log(jsonData)\n      return jsonData\n    }\n    catch(error){\n      console.log(error)\n    }\n}\n\nexport default FetchData","import React from 'react'\n\nfunction ReturnGifs(results,width,height){\n    console.log(results)\n\n\n    if(results.results.data !== undefined){\n    return (\n      results.results.data.map(item => <video autoPlay loop width={results.width} height={results.height} src={item.images.preview.mp4} key={item}></video>) \n    )}else{\n      return(\n        <h1>Please input something !</h1>\n      )\n    }\n  \n}\n\nexport default ReturnGifs","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { queryByTestId } from '@testing-library/react';\nimport FetchData from './components/FetchData.js'\nimport ReturnGifs from './components/ReturnGifs'\n\n\nfunction App() {\n\n  const [search,Setsearch] = useState(\"\")\n  const [query,Setquery] = useState(\"\")\n  const [results,Setresults] = useState([])\n  const [numOfImages,setnumOfImages] = useState([])\n  const [index,Setindex] = useState(0)\n  const [advanced,setAdvanced] = useState(false)\n  const [width,Setwidth] = useState (300)\n  const [height,Setheight] = useState (300)\n\n  useEffect(() =>{\n    async function getData(){\n      if(query !== ''){\n        const data = await FetchData(query,numOfImages)\n        Setresults(() => data)\n        Setindex((prevIndex) => prevIndex + 1)\n      }\n    }\n    getData()\n  },[query, numOfImages])\n  return (\n    <div>\n      <center>\n        <h1>Search for Gifs !</h1>\n      </center>\n        <br />\n        <form>\n          <label>What GIFs to look for ?</label>\n          <input type=\"text\"onChange={((e) => Setsearch(e.target.value))}></input>\n          <br />\n          <label>How many images to return ?</label>\n          <input type=\"number\"  onChange={((e) => setnumOfImages(e.target.value))}></input>\n          <br/>\n          <input type=\"checkbox\" onChange={() => setAdvanced((prevAdvanced) => !prevAdvanced)} ></input>\n          <label>Set advanced options</label>\n          <br/>\n          {advanced === true ?<div><label>What width of images do you want</label><input type=\"number\"  onChange={((e) => Setwidth(e.target.value))}></input><br /><label>What height of images do you want</label><input type=\"number\" default={height} onChange={((e) => Setheight(e.target.value))}></input></div> : null}      \n          <br/>\n          <input type=\"button\" value=\"Submit !\" onClick={() => Setquery(search)}></input>\n        </form>\n      <br />\n      <center>\n      <ReturnGifs results={results} width={width} height={height}/>\n      </center>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}